package com.smoothstack.lms.borrowerservice;

import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;

import org.springframework.test.web.servlet.result.MockMvcResultHandlers;

import com.smoothstack.lms.borrowerservice.entity.BookLoan;
import com.smoothstack.lms.borrowerservice.entity.BookLoan.BookLoanId;
import com.smoothstack.lms.borrowerservice.controller.BorrowerController;

import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;


@SpringBootTest
@AutoConfigureMockMvc
class BorrowerApplicationIntegrationTests {

  @Autowired
  private MockMvc mockMvc;

  @Autowired
  private ObjectMapper objectMapper;

  @Autowired
  private BorrowerController controller;

  @Test
  public void contextLoads() throws Exception {
    assertThat(controller).isNotNull();
  }


  // checkout
  // checkin
  // branches
  // avaiable-books
  // loans



  @Test
  void checkout() throws Exception {

    BookLoanId bookLoanId = new BookLoanId(1, 1, 1);

    System.out.println(bookLoanId);

    // mockMvc.perform(post("/lms/borrower/borrowers/book/checkout"))
    //        .contentType("application/json")
    //        .content(objectMapper.writeValueAsString(bookLoanId))
    //        .andExpect(status().isCreated());
    // mockMvc.perform(get("/students/1")).andDo(print()).andExpect(status().isOk())
    //       .andExpect(content().string(containsString("Rajesh")));

    mockMvc.perform(post("/lms/borrower/borrowers/book/checkout"))
      .contentType("application/json")
      .content(objectMapper.writeValueAsString(bookLoanId))
      .andExpect(status().isCreated());
      // .andExpect(mockMvc.perform(get("/lms/borrower/borrowers/1/loans"))
      //         .andExpect(status().isOk())
      //         .andDo(MockMvcResultHandlers.print()));

    // assertThat(mockMvc.perform(get("/lms/borrower/borrowers/1/loans"))
    //   .andReturn()
    //   .getResponse()
    //   .getContentAsString()
    //   .contains("id: 57"));
            // .andExpect(status().isOk())
            // .andDo(MockMvcResultHandlers.print()));
            // .andReturn()
            // .getResponse()
            // .getContentAsString()
            // .contains("id: 57"));
            // .andDo(MockMvcResultHandlers.print()));

      // String result = mockMvc.perform(get("/lms/borrower/borrowers/1/loans"))
      //                 .andExpect(status().isOk())
      //                 .andReturn()
      //                 .getResponse()
      //                 .getContentAsString();
      //
      //
      // System.out.println(result);
      //
      // assertThat(result.contains("id: 1000"));

  }
}
